apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'eclipse'
/*
plugins {
  // The following line allows to load io.gatling.gradle plugin and directly apply it
  id 'io.gatling.gradle' version '3.6.1'
}
*/
/*
gatling {
  // WARNING: options below only work when logback config file isn't provided
  logLevel = 'WARN' // logback root level
  logHttp = 'NONE' // set to 'ALL' for all HTTP traffic in TRACE, 'FAILURES' for failed HTTP traffic in DEBUG
}
 */

/* maven central is added by default, uncomment and add more custom repositories
repositories {
    mavenCentral()
}
*/

repositories {
mavenCentral()
 /** maven {
    url 'http://repository.excilys.com/content/groups/public'
  }*/
}

dependencies {
compile 'org.scala-lang:scala-library:2.12.10'
  //testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.2'
  testCompile 'io.gatling.highcharts:gatling-charts-highcharts:3.3.1'
  compile 'org.scala-lang:scala-compiler:2.12.10'
  compile 'com.fasterxml.uuid:java-uuid-generator:3.1.4'
  compile group:'commons-codec', name: 'commons-codec',version: '1.5'

  compile group:'com.github.mnogu', name: 'gatling-kafka_2.12',version: '0.2.0'
  compile group:'org.apache.kafka', name: 'kafka-clients',version: '2.4.0'
  //implementation group:'org.json', name: 'json',version: '20090211'
}

sourceSets {
  test{
    resources {
      srcDir 'conf'
    }
  }
}

sourceSets {
  test{
    output.resourcesDir 'target/test-classes'
  }
}
/**
 * Run Gatling Tests
 */

task gatling(dependsOn: 'compileTestScala'){
doLast {
  def absPath = System.getProperty("user.dir");
  // target/test-classes is required by gatling to be run
  def targetTestClassesFolder = new File(absPath, 'targer/test-classes')
  targetTestClassesFolder.mkdirs()

// create build/reports folder
  def targetReportsFolder = new File(project.buildDir.absolutePath, '/reports')
  targetReportsFolder.mkdirs()

  def runReports = true

  if (project.hasProperty("noReport")){
      runReports = false
  }


  //if only one
  if (project.hasProperty("sim")) {

    def gatlingScenarioClass = sim
    logger.lifecycle(" ----Executing sigle Gatling Simulations: ${gatlingScenarioClass} ----")
    runGatlingSimulation(gatlingScenarioClass, runReports)

  }else
  {
    def iSims = "";
    def splitiSims = []
    if (project.hasProperty("ignoreSims")){
      iSims = ignoreSims
      splitiSims = iSims.split(',')
    }

    logger.lifecycle(" ----Executing all Gatling Simulations from: ${sourceSets.test.output.resourcesDir} ----")

    sourceSets.test.output.resourcesDir.eachFileRecurse{ file ->
      if (file.isFile()){
        def gatlingScenarioClass = (file.getPath() - (sourceSets.test.output.resourcesDir.getPath() + File.separator - '.class')
          .replace(File.separator, '.'))

        def foundGatlingSim = gatlingScenarioClass.lastIndexOf("Simulation");
        if (foundGatlingSim > 0 && !splitiSims.contains(gatlingScnarioClass)){
          runGatlingSimulation(gatlingScnarioClass, runReports)
        }

      }

    }

  }
  logger.lifecycle(" ---- Done executing all Gatling Scnarios ----")
}
}

/**
*list all gatling simulations
 */

task listSims(dependsOn: 'compileTestScala'){
doLast {
  logger.lifecycle("\nListing all Gatling Simulation from: ${sourceSets.test.output.resourcesDir}: ")

  sourceSets.test.output.resourcesDir.eachFileRecurse{ file ->
    if (file.isFile()){
      def gatlingScenarioClass = (file.getPath() - (sourceSets.test.output.resourcesDir.getPath() + File.separator - '.class')
        .replace(File.separator, '.'))

      def foundGatlingSim = gatlingScenarioClass.lastIndexOf("Simulation");
      if (foundGatlingSim > 0 ){
        logger.lifecycle("\t${gatlingScnarioClass}")
      }

    }

  }

}

}

/**
 * Generate report by provided simulation log directory
 */
task gatlingReports(dependsOn: 'compileTestScala'){
  doLast {
    def simulationLogDir

  if (project.hasProperty("simLogsDir")) {
    simulationLogDir = simLogsDir
  }
    javaexec {
      main = 'io.gatling.app.Gatling'
      classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
      args '-ro', simulationLogDir
    }
        }

      }

/**
 * Merge Multiple Simulation Logs into a single log
 */

task mergeReports(dependsOn: 'compileTestScala'){
  doLast {
    def simulationLogDir = project.buildDir.absolutePath + '/reports/mergedSimulationLogs'

    if (project.hasProperty("simLogsDir")) {
      simulationLogDir = simLogsDir
    }

    def simulationLogFolder = new File(simulationLogDir)
    simulationLogFolder.makedirs()

    def reportDir = new File(project.buildDir.absolutePath + '/reports/')

    logger.lifecycle("------Moving all simulation.log files to build/simLogs derectory------")

    reportDir.eachFileRecurse{ file ->
      if (file.toString() != simulationLogDir ){
        if (file.isFile()){
          if (file.getName() == "simulation.log") {

            def dirSplit = file.toString().split('/')
            def newFileName = simulationLogDir + '/' + dirSplit[dirSplit.length - 2] + '.log'

            file.renameTo(newFileName)

          }
        }
      }
    }

    logger.lifecycle("------Merging all simulations into one Report------")

    javaexec {
      main = 'io.gatling.app.Gatling'
      classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
      args '-ro', simulationLogDir
    }
  }

}

/**
 * Run the gatling tests w/ params
 * @param gatlingScenarioClass
 * @param runReports
 * @return
 */

def runGatlingSimulation(Object gatlingScenarioClass, runReports = true){
  def absPath = System.getProperty("user.dir");

  javaexec {
    if (project.hasProperty('jvmArgs')){
      jvmArgs project.jvmArgs.split('\\s+')
    }else {
      println "Usage: gradle clean gatling -Psim=”dataSync.simulations.dataSyncSimulation“ -PjvmArgs="
      throw new GradleException("Please refer to usage, jvmArgs does not exists")
    }

    jvmArgs = [
      //workaround for https://github.com/gatling/gatling/issues/2689
      //"-Dgatling.core.directory.binaries=${sourceSets.test.output.resourcesDir.toString()}",
      "-Dlogback.configurationFile=${logbackGatlingConfig()}",
      '-Xms512M','-Xmx2048M'
    ]



    main = 'io.gatling.app.Gatling'
    classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
    args '-sf', sourceSets.test.output.resourcesDir,
      '-s', gatlingScenarioClass,
      '-rf', project.buildDir.absolutePath + '/reports/',
      '-rsf', absPath + '/data/'

    if (runReports == false){
        args '-nr'
    }
  }

}


wrapper{
  gradleVersion = '5.6'
}

def logbackGatlingConfig(){
  return sourceSets.test.resources.find{ it.name == 'logback.xml'}
}
